{"version":3,"file":"static/js/916.230e7480.chunk.js","mappings":"0LACA,MAAwB,sB,iDCMT,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,IAAeD,MAQlD,OAPiBD,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIE,EAAAA,EAAAA,IAAiBF,MAOrCG,QAChB,UAAC,EAAAC,SAAD,YACE,eAAIC,UAAU,QAAd,uBACA,kBACEP,MAAOA,EACPQ,SAVgB,SAAAC,GACpB,IAAMC,EAAaD,EAAEE,OAAOX,MAAMY,cAAcC,OAChDf,GAASgB,EAAAA,EAAAA,IAAOJ,KASZH,UAAWQ,EACXC,YAAY,sBAGd,O,8HC3BC,IAAMZ,EAAmB,SAAAF,GAC9B,OAAOA,EAAMe,UAGFd,EAAiB,SAAAD,GAC5B,OAAOA,EAAMY,QAGFI,EAA2B,SAAAhB,GACtC,IAAMe,EAAWb,EAAiBF,GAC5BY,EAASX,EAAeD,GAC9B,cAAOe,QAAP,IAAOA,OAAP,EAAOA,EAAUH,QAAO,SAAAK,GAAE,OAAIA,EAAGC,KAAKR,cAAcS,SAASP,OAOlDQ,EAAa,SAAApB,GACxB,IAAMe,EAAWb,EAAiBF,GAC5BqB,EANsB,SAAArB,GAC5B,OAAOA,EAAMsB,KAKFC,CAAevB,GAC1B,OAAOe,EAASS,MAAK,SAAAP,GAAE,OAAIA,EAAGI,KAAOA","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import s from './Filter.module.css';\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector, contactsSelector } from 'redux/selectors';\nimport { filter } from 'redux/contacts-slice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => filterSelector(state));\n  const contacts = useSelector(state => contactsSelector(state));\n\n  const searchHandler = e => {\n    const inputValue = e.target.value.toLowerCase().trim();\n    dispatch(filter(inputValue));\n  };\n\n  return !!contacts.length ? (\n    <Fragment>\n      <h2 className=\"title\">Contacts</h2>\n      <input\n        value={value}\n        onChange={searchHandler}\n        className={s.input}\n        placeholder=\"Search contact\"\n      />\n    </Fragment>\n  ) : null;\n}\n\nFilter.propTypes = {\n  searchHandler: PropTypes.func,\n  value: PropTypes.string,\n};\n","export const contactsSelector = state => {\n  return state.contacts;\n};\n\nexport const filterSelector = state => {\n  return state.filter;\n};\n\nexport const filteredContactsSelector = state => {\n  const contacts = contactsSelector(state);\n  const filter = filterSelector(state);\n  return contacts?.filter(el => el.name.toLowerCase().includes(filter));\n};\n\nexport const editIdSelector = state => {\n  return state.edit;\n};\n\nexport const getContact = state => {\n  const contacts = contactsSelector(state);\n  const id = editIdSelector(state);\n  return contacts.find(el => el.id === id);\n};\n"],"names":["Filter","dispatch","useDispatch","value","useSelector","state","filterSelector","contactsSelector","length","Fragment","className","onChange","e","inputValue","target","toLowerCase","trim","filter","s","placeholder","contacts","filteredContactsSelector","el","name","includes","getContact","id","edit","editIdSelector","find"],"sourceRoot":""}