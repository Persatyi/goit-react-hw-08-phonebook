{"version":3,"file":"static/js/231.05fb4a0d.chunk.js","mappings":"0LACA,MAAuB,0BAAvB,EAAwD,0BAAxD,EAA4F,6BAA5F,EAAmI,6BAAnI,EAAyK,4BAAzK,EAA+M,uD,2DCQhM,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,IAAyBD,MACzDE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,SACR,CAACH,IAEJ,IAAMI,EAAa,SAAAC,GACjB,IAAMC,EAAKD,EAAEE,OAAOD,GACpBN,GAASQ,EAAAA,EAAAA,IAAcF,KAGnBG,EAAW,SAAAJ,GACf,IAAMC,EAAKD,EAAEE,OAAOD,GACpBN,GAASU,EAAAA,EAAAA,IAAKJ,KAGhB,OAA2B,IAApBV,EAASe,OAAe,MAC7B,eAAIC,UAAWC,EAAf,SACGjB,EAASkB,KAAI,SAAAC,GAAO,OACnB,gBAAIH,UAAWC,EAAf,UACGG,OAAOC,KAAKF,GAASD,KAAI,SAAAI,GAAE,MACnB,OAAPA,EAAc,MACZ,eAAGN,UAAWC,EAAd,WACE,kBAAMD,UAAWC,EAAjB,UAA6BK,EAA7B,OACCH,EAAQG,KAFmBH,EAAQG,QAM1C,mBACEC,QAASV,EACTH,GAAIS,EAAQT,GACZM,UAAWC,EACXO,KAAK,SAJP,mBAQA,mBACED,QAASf,EACTE,GAAIS,EAAQT,GACZM,UAAWC,EACXO,KAAK,SAJP,sBAjB0BL,EAAQT,W,8HC9BrC,IAAMe,EAAmB,SAAAvB,GAC9B,OAAOA,EAAMF,UAGF0B,EAAiB,SAAAxB,GAC5B,OAAOA,EAAMyB,QAGFxB,EAA2B,SAAAD,GACtC,IAAMF,EAAWyB,EAAiBvB,GAC5ByB,EAASD,EAAexB,GAC9B,cAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAU2B,QAAO,SAAAL,GAAE,OAAIA,EAAGM,KAAKC,cAAcC,SAASH,OAOlDI,EAAa,SAAA7B,GACxB,IAAMF,EAAWyB,EAAiBvB,GAC5BQ,EANsB,SAAAR,GAC5B,OAAOA,EAAMY,KAKFkB,CAAe9B,GAC1B,OAAOF,EAASiC,MAAK,SAAAX,GAAE,OAAIA,EAAGZ,KAAOA","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"details\":\"ContactList_details__m6Vwr\",\"element\":\"ContactList_element__v3kbj\",\"button\":\"ContactList_button__7kL4l\",\"editBtn\":\"ContactList_editBtn__3eiID ContactList_button__7kL4l\"};","import s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filteredContactsSelector } from 'redux/selectors';\nimport { getContacts } from 'redux/contacts-thunk';\nimport { useEffect } from 'react';\nimport { deleteContact } from 'redux/contacts-thunk';\nimport { edit } from 'redux/contacts-slice';\n\nexport default function ContactList() {\n  const contacts = useSelector(state => filteredContactsSelector(state));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const deleteItem = e => {\n    const id = e.target.id;\n    dispatch(deleteContact(id));\n  };\n\n  const editItem = e => {\n    const id = e.target.id;\n    dispatch(edit(id));\n  };\n\n  return contacts.length === 0 ? null : (\n    <ul className={s.list}>\n      {contacts.map(contact => (\n        <li className={s.item} key={contact.id}>\n          {Object.keys(contact).map(el =>\n            el === 'id' ? null : (\n              <p className={s.element} key={contact[el]}>\n                <span className={s.details}>{el}:</span>\n                {contact[el]}\n              </p>\n            )\n          )}\n          <button\n            onClick={editItem}\n            id={contact.id}\n            className={s.editBtn}\n            type=\"button\"\n          >\n            Edit\n          </button>\n          <button\n            onClick={deleteItem}\n            id={contact.id}\n            className={s.button}\n            type=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  editItem: PropTypes.func,\n  deleteItem: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const contactsSelector = state => {\n  return state.contacts;\n};\n\nexport const filterSelector = state => {\n  return state.filter;\n};\n\nexport const filteredContactsSelector = state => {\n  const contacts = contactsSelector(state);\n  const filter = filterSelector(state);\n  return contacts?.filter(el => el.name.toLowerCase().includes(filter));\n};\n\nexport const editIdSelector = state => {\n  return state.edit;\n};\n\nexport const getContact = state => {\n  const contacts = contactsSelector(state);\n  const id = editIdSelector(state);\n  return contacts.find(el => el.id === id);\n};\n"],"names":["ContactList","contacts","useSelector","state","filteredContactsSelector","dispatch","useDispatch","useEffect","getContacts","deleteItem","e","id","target","deleteContact","editItem","edit","length","className","s","map","contact","Object","keys","el","onClick","type","contactsSelector","filterSelector","filter","name","toLowerCase","includes","getContact","editIdSelector","find"],"sourceRoot":""}