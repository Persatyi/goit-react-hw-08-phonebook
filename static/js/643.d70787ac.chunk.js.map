{"version":3,"file":"static/js/643.d70787ac.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import s from './ContactForm.module.css';\nimport { Fragment, useReducer } from 'react';\nimport data from 'db/input.json';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts-thunk';\nimport { toast } from 'react-toastify';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n\n  const initialState = {\n    name: '',\n    number: '',\n  };\n\n  const initialTypes = {\n    name: 'name',\n    number: 'number',\n    reset: 'reset',\n  };\n\n  const [state, dispatchLocal] = useReducer(reducer, initialState);\n\n  function reducer(state, action) {\n    const { type, payload } = action;\n    switch (type) {\n      case initialTypes.name:\n        return { ...state, name: payload };\n      case initialTypes.number:\n        return { ...state, number: payload };\n      case initialTypes.reset:\n        return initialState;\n      default:\n        return state;\n    }\n  }\n\n  const controlTheInput = e => {\n    const { value, name } = e.target;\n    dispatchLocal({ type: name, payload: value });\n  };\n\n  const addContactOnSubmit = e => {\n    e.preventDefault();\n\n    const contact = { id: nanoid(), ...state };\n\n    const ifName = contacts.find(\n      el => el.name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (ifName) {\n      toast.info(`${ifName.name} is already exist, please type new name`);\n      return;\n    }\n\n    const ifNumber = contacts.find(\n      el => el.number.replaceAll('-', '') === contact.number.replaceAll('-', '')\n    );\n\n    if (ifNumber) {\n      toast.info(`${ifNumber.number} is already exist, please type new number`);\n      return;\n    }\n\n    dispatch(addContact(contact));\n    dispatchLocal({ type: 'reset' });\n  };\n\n  const keysArr = Object.keys(initialState);\n  return (\n    <>\n      <h1 className=\"title\">Phonebook</h1>\n      <form className={s.form} onSubmit={addContactOnSubmit}>\n        {keysArr.map(key => {\n          const { id, type, name, pattern, title } = data[key];\n          return (\n            <Fragment key={id}>\n              <label className={s.label} htmlFor={id}>\n                {name}\n              </label>\n              <input\n                onChange={controlTheInput}\n                value={state[key]}\n                id={id}\n                className={s.input}\n                type={type}\n                name={name}\n                pattern={pattern}\n                title={title}\n                required\n              />\n            </Fragment>\n          );\n        })}\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  controlTheInput: PropTypes.func,\n  addContactOnSubmit: PropTypes.func,\n  keysArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      type: PropTypes.string,\n      name: PropTypes.string,\n      pattern: PropTypes.string,\n      title: PropTypes.string,\n    })\n  ),\n};\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","contacts","useSelector","state","initialState","name","number","initialTypes","useReducer","action","type","payload","dispatchLocal","controlTheInput","e","target","value","keysArr","Object","keys","className","s","onSubmit","preventDefault","contact","ifName","find","el","toLowerCase","toast","ifNumber","replaceAll","addContact","map","key","data","pattern","title","Fragment","htmlFor","onChange","required","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}